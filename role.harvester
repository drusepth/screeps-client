var constants = require('constants');

var roleHarvester = {
    run: function(creep) {
        this.creep = creep;
        this.room  = creep.room;

	    if (this.canCarryMoreEnergy()) {
            this.mineEnergy();
        } else {
            this.returnEnergyToDeposit();
        }
	},

	canCarryMoreEnergy: function () {
	    return this.creep.carry.energy < this.creep.carryCapacity;
	},

	mineEnergy: function () {
	    var energySources  = this.room.find(FIND_SOURCES);
	    var assignedSource = this.creep.memory.roleId % energySources.length;

        if (this.creep.harvest(energySources[assignedSource]) == ERR_NOT_IN_RANGE) {
            this.moveTowardsEnergySource(energySources[assignedSource]);
        }
	},

	moveTowardsEnergySource: function (energySource) {
	    this.creep.moveTo(energySource, { visualizePathStyle: { stroke: constants.colors.harvester.path_to_energy } });
	},

	validEnergyDeposits: function () {
	    return this.creep.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
                return (
                    structure.structureType == STRUCTURE_EXTENSION ||
                    structure.structureType == STRUCTURE_SPAWN ||
                    structure.structureType == STRUCTURE_TOWER
                ) && (
                    structure.energy < structure.energyCapacity
                );
            }
        });
	},

	returnEnergyToDeposit: function () {
	    var deposits = this.validEnergyDeposits();

        if (deposits.length > 0) {
            var assignedDeposit = null;

            // TODO: This clearly needs a higher-order reduce or something.
            for (var i = 0; i < deposits.length; i++) {
                if (deposits[i].energy < deposits[i].energyCapacity) {
                    assignedDeposit = deposits[i];
                    break;
                }
            }

            if (this.creep.transfer(assignedDeposit, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                this.creep.moveTo(assignedDeposit, { visualizePathStyle: { stroke: constants.colors.harvester.path_from_energy } });
            }
        } else {
            this.creep.say('Job done.');
            this.creep.memory.role = 'free-agent';
        }
	}
};

module.exports = roleHarvester;
