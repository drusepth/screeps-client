var constants = require('constants');

var roleFortifier = {
    run: function(creep) {
        this.creep = creep;

        var repairableTargets = this.structuresSortedByRepairNeed();
        if (repairableTargets.length == 0) {
            self.creep.say('Job done!');
            self.creep.memory.role = 'free-agent';
            return;
        }

        var designatedRepairTarget = repairableTargets[0]; // sorted by lowest-hits first
        if (self.outOfEnergy()) {
            this.goGetEnergy();
        }

        if (this.creep.repair(designatedRepairTarget) == ERR_NOT_IN_RANGE) {
            if (this.creep.atEnergyCapacity()) {
                this.creep.moveTo(designatedRepairTarget, { visualizePathStyle: { stroke: '#582828' } });
            } else {
                this.goGetEnergy();
            }
	    }
	},

	energySourceByDistance: function () {
    	return this.creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE);
	},

	outOfEnergy: function () {
	    return this.creep.carry.energy == 0;
	},

	atEnergyCapacity: function () {
	    return this.creep.carry.energy == this.creep.carryCapacity;
	},

	goGetEnergy: function () {
	    var stockedStockpiles = this.energyStockpiles();
        if (stockedStockpiles.length > 0) {
            // TODO: assign to closest stockpile?
            var assignedStockpile = stockedStockpiles[0];
            if (this.creep.withdraw(assignedStockpile, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                this.creep.moveTo(assignedStockpile, { visualizePathStyle: { stroke: '#ffaa00' } });
            }
        } else {
            var sources = this.creep.room.find(FIND_SOURCES);
            if (this.creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                this.creep.moveTo(sources[0], { visualizePathStyle: { stroke: '#ffaa00' } });
            }
        }
	},

	structuresSortedByRepairNeed: function () {
	    return this.creep.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
                return (
                    structure.structureType == STRUCTURE_WALL ||
                    structure.structureType == STRUCTURE_RAMPART ||
                    structure.structureType == STRUCTURE_TOWER
                ) && (
                    structure.hits < structure.hitsMax
                );
            }
        }).sort((a,b) => a.hits - b.hits);
	},
};

module.exports = roleFortifier;
